// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: fetch.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataFetchService_FetchDataStream_FullMethodName = "/pb.DataFetchService/FetchDataStream"
)

// DataFetchServiceClient is the client API for DataFetchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The data fetch service definition.
type DataFetchServiceClient interface {
	// A bidirectional streaming RPC.
	FetchDataStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FetchRequest, FetchResponse], error)
}

type dataFetchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataFetchServiceClient(cc grpc.ClientConnInterface) DataFetchServiceClient {
	return &dataFetchServiceClient{cc}
}

func (c *dataFetchServiceClient) FetchDataStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FetchRequest, FetchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataFetchService_ServiceDesc.Streams[0], DataFetchService_FetchDataStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FetchRequest, FetchResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataFetchService_FetchDataStreamClient = grpc.BidiStreamingClient[FetchRequest, FetchResponse]

// DataFetchServiceServer is the server API for DataFetchService service.
// All implementations must embed UnimplementedDataFetchServiceServer
// for forward compatibility.
//
// The data fetch service definition.
type DataFetchServiceServer interface {
	// A bidirectional streaming RPC.
	FetchDataStream(grpc.BidiStreamingServer[FetchRequest, FetchResponse]) error
	mustEmbedUnimplementedDataFetchServiceServer()
}

// UnimplementedDataFetchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataFetchServiceServer struct{}

func (UnimplementedDataFetchServiceServer) FetchDataStream(grpc.BidiStreamingServer[FetchRequest, FetchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchDataStream not implemented")
}
func (UnimplementedDataFetchServiceServer) mustEmbedUnimplementedDataFetchServiceServer() {}
func (UnimplementedDataFetchServiceServer) testEmbeddedByValue()                          {}

// UnsafeDataFetchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataFetchServiceServer will
// result in compilation errors.
type UnsafeDataFetchServiceServer interface {
	mustEmbedUnimplementedDataFetchServiceServer()
}

func RegisterDataFetchServiceServer(s grpc.ServiceRegistrar, srv DataFetchServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataFetchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataFetchService_ServiceDesc, srv)
}

func _DataFetchService_FetchDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataFetchServiceServer).FetchDataStream(&grpc.GenericServerStream[FetchRequest, FetchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataFetchService_FetchDataStreamServer = grpc.BidiStreamingServer[FetchRequest, FetchResponse]

// DataFetchService_ServiceDesc is the grpc.ServiceDesc for DataFetchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataFetchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DataFetchService",
	HandlerType: (*DataFetchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchDataStream",
			Handler:       _DataFetchService_FetchDataStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fetch.proto",
}
